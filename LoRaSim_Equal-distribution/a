        if experiment == 6:  # HEURISTICA
            self.cr = 1
            self.bw = 125
            Priorisf = [0.47, 0.258, 0.143, 0.071, 0.035, 0.023]
        
            Quantsf = nrNodes * Priorisf
            Quantsf = [element * nrNodes for element in Priorisf]
            print(Quantsf)
            print(int(Quantsf[0] / 2))
            minX = 0
            minY = 0
            changes: LoRaSim_Equal - distribution / equal - distr_heuristc.py
            if (self.nodeid >= 0) and (self.nodeid < Quantsf[0]):
                self.sf = 7
                minX = 0
            
            elif (self.nodeid >= Quantsf[0]) and (self.nodeid < int(Quantsf[1] + Quantsf[0])):
                self.sf = 8
                minX = 1
            
            elif (self.nodeid >= Quantsf[1]) and (self.nodeid < Quantsf[2] + Quantsf[1]):
                self.sf = 9
                minX = 2
            
            elif (self.nodeid >= Quantsf[2]) and (self.nodeid < Quantsf[3] + Quantsf[2]):
                self.sf = 10
                minX = 3
            
            elif (self.nodeid >= Quantsf[3]) and (self.nodeid < Quantsf[4] + Quantsf[3]):
                self.sf = 11
                minX = 4
            
            elif (self.nodeid >= Quantsf[4]) and (self.nodeid < Quantsf[5] + Quantsf[4]):
                self.sf = 12
                minX = 5
            
            if (self.nodeid >= 0) and (self.nodeid < Quantsf[0]):
                self.sf = 7
                minX = 0
                if (self.nodeid >= 0) and (self.nodeid < int(Quantsf[0] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[0] / 8)) and (self.nodeid < 2 * int(Quantsf[0] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= 2 * int(Quantsf[0] / 8)) and (self.nodeid < 3 * int(Quantsf[0] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= 3 * int(Quantsf[0] / 8)) and (self.nodeid < 4 * int(Quantsf[0] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= 4 * int(Quantsf[0] / 8)) and (self.nodeid < 5 * int(Quantsf[0] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= 5 * int(Quantsf[0] / 8)) and (self.nodeid < 6 * int(Quantsf[0] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= 6 * int(Quantsf[0] / 8)) and (self.nodeid < 7 * int(Quantsf[0] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= 7 * int(Quantsf[0] / 8)) and (self.nodeid < Quantsf[0]):
                    self.freq = CF8
                    minY = 7
            
            elif (self.nodeid >= Quantsf[0]) and (self.nodeid < Quantsf[1] + Quantsf[0]):
                self.sf = 8
                minX = 1
                if (self.nodeid >= Quantsf[0]) and (self.nodeid < int(Quantsf[0] + Quantsf[1] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[0] + Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 2 * Quantsf[1] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= int(Quantsf[0] + 2 * Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 3 * Quantsf[1] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= int(Quantsf[0] + 3 * Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 4 * Quantsf[1] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= int(Quantsf[0] + 4 * Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 5 * Quantsf[1] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= int(Quantsf[0] + 5 * Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 6 * Quantsf[1] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= int(Quantsf[0] + 6 * Quantsf[1] / 8)) and (self.nodeid < int(Quantsf[0] + 7 * Quantsf[1] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= int(Quantsf[0] + 7 * Quantsf[1] / 8)) and (self.nodeid < Quantsf[0] + Quantsf[1]):
                    self.freq = CF8
                    minY = 7
            
            elif (self.nodeid >= Quantsf[1]) and (self.nodeid < Quantsf[2] + Quantsf[1]):
                self.sf = 9
                minX = 2
                if (self.nodeid >= 0) and (self.nodeid < int(Quantsf[0] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[2] / 8)) and (self.nodeid < 2 * int(Quantsf[2] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= 2 * int(Quantsf[2] / 8)) and (self.nodeid < 3 * int(Quantsf[2] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= 3 * int(Quantsf[2] / 8)) and (self.nodeid < 4 * int(Quantsf[2] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= 4 * int(Quantsf[2] / 8)) and (self.nodeid < 5 * int(Quantsf[2] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= 5 * int(Quantsf[2] / 8)) and (self.nodeid < 6 * int(Quantsf[2] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= 6 * int(Quantsf[2] / 8)) and (self.nodeid < 7 * int(Quantsf[2] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= 7 * int(Quantsf[2] / 8)) and (self.nodeid < Quantsf[2]):
                    self.freq = CF8
                    minY = 7
            elif (self.nodeid >= Quantsf[2]) and (self.nodeid < Quantsf[3] + Quantsf[2]):
                self.sf = 10
                minX = 3
                if (self.nodeid >= 0) and (self.nodeid < int(Quantsf[0] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[3] / 8)) and (self.nodeid < 2 * int(Quantsf[3] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= 2 * int(Quantsf[3] / 8)) and (self.nodeid < 3 * int(Quantsf[3] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= 3 * int(Quantsf[3] / 8)) and (self.nodeid < 4 * int(Quantsf[3] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= 4 * int(Quantsf[3] / 8)) and (self.nodeid < 5 * int(Quantsf[3] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= 5 * int(Quantsf[3] / 8)) and (self.nodeid < 6 * int(Quantsf[3] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= 6 * int(Quantsf[3] / 8)) and (self.nodeid < 7 * int(Quantsf[3] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= 7 * int(Quantsf[3] / 8)) and (self.nodeid < Quantsf[3]):
                    self.freq = CF8
                    minY = 7
            elif (self.nodeid >= Quantsf[3]) and (self.nodeid < Quantsf[4] + Quantsf[3]):
                self.sf = 11
                minX = 4
                if (self.nodeid >= 0) and (self.nodeid < int(Quantsf[0] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[4] / 8)) and (self.nodeid < 2 * int(Quantsf[4] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= 2 * int(Quantsf[4] / 8)) and (self.nodeid < 3 * int(Quantsf[4] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= 3 * int(Quantsf[4] / 8)) and (self.nodeid < 4 * int(Quantsf[4] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= 4 * int(Quantsf[4] / 8)) and (self.nodeid < 5 * int(Quantsf[4] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= 5 * int(Quantsf[4] / 8)) and (self.nodeid < 6 * int(Quantsf[4] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= 6 * int(Quantsf[4] / 8)) and (self.nodeid < 7 * int(Quantsf[4] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= 7 * int(Quantsf[4] / 8)) and (self.nodeid < Quantsf[4]):
                    self.freq = CF8
                    minY = 7
            elif (self.nodeid >= Quantsf[4]) and (self.nodeid < Quantsf[5] + Quantsf[4]):
                self.sf = 12
                minX = 5
                if (self.nodeid >= 0) and (self.nodeid < int(Quantsf[0] / 8)):
                    self.freq = CF1
                    minY = 0
                elif (self.nodeid >= int(Quantsf[5] / 8)) and (self.nodeid < 2 * int(Quantsf[5] / 8)):
                    self.freq = CF2
                    minY = 1
                elif (self.nodeid >= 2 * int(Quantsf[5] / 8)) and (self.nodeid < 3 * int(Quantsf[5] / 8)):
                    self.freq = CF3
                    minY = 2
                elif (self.nodeid >= 3 * int(Quantsf[5] / 8)) and (self.nodeid < 4 * int(Quantsf[5] / 8)):
                    self.freq = CF4
                    minY = 3
                elif (self.nodeid >= 4 * int(Quantsf[5] / 8)) and (self.nodeid < 5 * int(Quantsf[5] / 8)):
                    self.freq = CF5
                    minY = 4
                elif (self.nodeid >= 5 * int(Quantsf[5] / 8)) and (self.nodeid < 6 * int(Quantsf[5] / 8)):
                    self.freq = CF6
                    minY = 5
                elif (self.nodeid >= 6 * int(Quantsf[5] / 8)) and (self.nodeid < 7 * int(Quantsf[5] / 8)):
                    self.freq = CF7
                    minY = 6
                elif (self.nodeid >= 7 * int(Quantsf[5] / 8)) and (self.nodeid < Quantsf[5]):
                    self.freq = CF8
                    minY = 7
            
            m_uti[minX, minY] = m_uti[minX, minY] + 1  # Matrix
            Umatrix = pd.DataFrame(m_uti)
            Umatrix.columns = ['CF1', 'CF2', 'CF3', 'CF4', 'CF5', 'CF6', 'CF7', 'CF8']
            Umatrix.index = ['SF7', 'SF8', 'SF9', 'SF10', 'SF11', 'SF12']
            print(Umatrix.T)
